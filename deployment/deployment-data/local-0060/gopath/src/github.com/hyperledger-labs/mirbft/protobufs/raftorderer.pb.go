// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1-devel
// 	protoc        (unknown)
// source: raftorderer.proto

package protobufs

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type RaftVoteRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Term        int32 `protobuf:"varint,1,opt,name=term,proto3" json:"term,omitempty"`                                  // candidate's term
	CandidateId int32 `protobuf:"varint,2,opt,name=candidate_id,json=candidateId,proto3" json:"candidate_id,omitempty"` // candidate requesting vote
	LastSn      int32 `protobuf:"varint,3,opt,name=last_sn,json=lastSn,proto3" json:"last_sn,omitempty"`                // sequence number of candidate's last log entry
	LastTerm    int32 `protobuf:"varint,4,opt,name=last_term,json=lastTerm,proto3" json:"last_term,omitempty"`          // term of candidates's last log entry
}

func (x *RaftVoteRequest) Reset() {
	*x = RaftVoteRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_raftorderer_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RaftVoteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RaftVoteRequest) ProtoMessage() {}

func (x *RaftVoteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_raftorderer_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RaftVoteRequest.ProtoReflect.Descriptor instead.
func (*RaftVoteRequest) Descriptor() ([]byte, []int) {
	return file_raftorderer_proto_rawDescGZIP(), []int{0}
}

func (x *RaftVoteRequest) GetTerm() int32 {
	if x != nil {
		return x.Term
	}
	return 0
}

func (x *RaftVoteRequest) GetCandidateId() int32 {
	if x != nil {
		return x.CandidateId
	}
	return 0
}

func (x *RaftVoteRequest) GetLastSn() int32 {
	if x != nil {
		return x.LastSn
	}
	return 0
}

func (x *RaftVoteRequest) GetLastTerm() int32 {
	if x != nil {
		return x.LastTerm
	}
	return 0
}

type RaftVoteResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Term        int32 `protobuf:"varint,1,opt,name=term,proto3" json:"term,omitempty"`                                  // current term
	CandidateId int32 `protobuf:"varint,2,opt,name=candidate_id,json=candidateId,proto3" json:"candidate_id,omitempty"` // the candidate who requested the vote
	VoteGranted bool  `protobuf:"varint,3,opt,name=vote_granted,json=voteGranted,proto3" json:"vote_granted,omitempty"` // true if the node votes for the candidate
}

func (x *RaftVoteResponse) Reset() {
	*x = RaftVoteResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_raftorderer_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RaftVoteResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RaftVoteResponse) ProtoMessage() {}

func (x *RaftVoteResponse) ProtoReflect() protoreflect.Message {
	mi := &file_raftorderer_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RaftVoteResponse.ProtoReflect.Descriptor instead.
func (*RaftVoteResponse) Descriptor() ([]byte, []int) {
	return file_raftorderer_proto_rawDescGZIP(), []int{1}
}

func (x *RaftVoteResponse) GetTerm() int32 {
	if x != nil {
		return x.Term
	}
	return 0
}

func (x *RaftVoteResponse) GetCandidateId() int32 {
	if x != nil {
		return x.CandidateId
	}
	return 0
}

func (x *RaftVoteResponse) GetVoteGranted() bool {
	if x != nil {
		return x.VoteGranted
	}
	return false
}

type RaftAppendEntryRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Index        int32  `protobuf:"varint,1,opt,name=index,proto3" json:"index,omitempty"`
	Term         int32  `protobuf:"varint,2,opt,name=term,proto3" json:"term,omitempty"`                                     // leader's term
	PrevIndex    int32  `protobuf:"varint,3,opt,name=prev_index,json=prevIndex,proto3" json:"prev_index,omitempty"`          // sequence number of the log entry of the segment immediately preceding
	PrevTerm     int32  `protobuf:"varint,4,opt,name=prev_term,json=prevTerm,proto3" json:"prev_term,omitempty"`             // term of the previous logged sn
	Batch        *Batch `protobuf:"bytes,5,opt,name=batch,proto3" json:"batch,omitempty"`                                    // batch of requests
	LeaderCommit int32  `protobuf:"varint,6,opt,name=leader_commit,json=leaderCommit,proto3" json:"leader_commit,omitempty"` // leader's commit index
	Aborted      bool   `protobuf:"varint,7,opt,name=aborted,proto3" json:"aborted,omitempty"`
}

func (x *RaftAppendEntryRequest) Reset() {
	*x = RaftAppendEntryRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_raftorderer_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RaftAppendEntryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RaftAppendEntryRequest) ProtoMessage() {}

func (x *RaftAppendEntryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_raftorderer_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RaftAppendEntryRequest.ProtoReflect.Descriptor instead.
func (*RaftAppendEntryRequest) Descriptor() ([]byte, []int) {
	return file_raftorderer_proto_rawDescGZIP(), []int{2}
}

func (x *RaftAppendEntryRequest) GetIndex() int32 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *RaftAppendEntryRequest) GetTerm() int32 {
	if x != nil {
		return x.Term
	}
	return 0
}

func (x *RaftAppendEntryRequest) GetPrevIndex() int32 {
	if x != nil {
		return x.PrevIndex
	}
	return 0
}

func (x *RaftAppendEntryRequest) GetPrevTerm() int32 {
	if x != nil {
		return x.PrevTerm
	}
	return 0
}

func (x *RaftAppendEntryRequest) GetBatch() *Batch {
	if x != nil {
		return x.Batch
	}
	return nil
}

func (x *RaftAppendEntryRequest) GetLeaderCommit() int32 {
	if x != nil {
		return x.LeaderCommit
	}
	return 0
}

func (x *RaftAppendEntryRequest) GetAborted() bool {
	if x != nil {
		return x.Aborted
	}
	return false
}

type RaftAppendEntryResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Index     int32 `protobuf:"varint,1,opt,name=index,proto3" json:"index,omitempty"`
	Term      int32 `protobuf:"varint,2,opt,name=term,proto3" json:"term,omitempty"`           // current term for leader to update
	Success   bool  `protobuf:"varint,3,opt,name=success,proto3" json:"success,omitempty"`     // true if the node has a log entry matching the prevSn and prevTerm
	NextIndex int32 `protobuf:"varint,4,opt,name=nextIndex,proto3" json:"nextIndex,omitempty"` // the  index the node is expecting next
}

func (x *RaftAppendEntryResponse) Reset() {
	*x = RaftAppendEntryResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_raftorderer_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RaftAppendEntryResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RaftAppendEntryResponse) ProtoMessage() {}

func (x *RaftAppendEntryResponse) ProtoReflect() protoreflect.Message {
	mi := &file_raftorderer_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RaftAppendEntryResponse.ProtoReflect.Descriptor instead.
func (*RaftAppendEntryResponse) Descriptor() ([]byte, []int) {
	return file_raftorderer_proto_rawDescGZIP(), []int{3}
}

func (x *RaftAppendEntryResponse) GetIndex() int32 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *RaftAppendEntryResponse) GetTerm() int32 {
	if x != nil {
		return x.Term
	}
	return 0
}

func (x *RaftAppendEntryResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *RaftAppendEntryResponse) GetNextIndex() int32 {
	if x != nil {
		return x.NextIndex
	}
	return 0
}

var File_raftorderer_proto protoreflect.FileDescriptor

var file_raftorderer_proto_rawDesc = []byte{
	0x0a, 0x11, 0x72, 0x61, 0x66, 0x74, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x65, 0x72, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x09, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x73, 0x1a, 0x0d,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x7e, 0x0a,
	0x0f, 0x52, 0x61, 0x66, 0x74, 0x56, 0x6f, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x12, 0x0a, 0x04, 0x74, 0x65, 0x72, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04,
	0x74, 0x65, 0x72, 0x6d, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x61, 0x6e, 0x64, 0x69, 0x64, 0x61, 0x74,
	0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x63, 0x61, 0x6e, 0x64,
	0x69, 0x64, 0x61, 0x74, 0x65, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x6c, 0x61, 0x73, 0x74, 0x5f,
	0x73, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6c, 0x61, 0x73, 0x74, 0x53, 0x6e,
	0x12, 0x1b, 0x0a, 0x09, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x74, 0x65, 0x72, 0x6d, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x08, 0x6c, 0x61, 0x73, 0x74, 0x54, 0x65, 0x72, 0x6d, 0x22, 0x6c, 0x0a,
	0x10, 0x52, 0x61, 0x66, 0x74, 0x56, 0x6f, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x65, 0x72, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x04, 0x74, 0x65, 0x72, 0x6d, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x61, 0x6e, 0x64, 0x69, 0x64, 0x61,
	0x74, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x63, 0x61, 0x6e,
	0x64, 0x69, 0x64, 0x61, 0x74, 0x65, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x76, 0x6f, 0x74, 0x65,
	0x5f, 0x67, 0x72, 0x61, 0x6e, 0x74, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b,
	0x76, 0x6f, 0x74, 0x65, 0x47, 0x72, 0x61, 0x6e, 0x74, 0x65, 0x64, 0x22, 0xe5, 0x01, 0x0a, 0x16,
	0x52, 0x61, 0x66, 0x74, 0x41, 0x70, 0x70, 0x65, 0x6e, 0x64, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x12, 0x0a, 0x04,
	0x74, 0x65, 0x72, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x74, 0x65, 0x72, 0x6d,
	0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x65, 0x76, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x70, 0x72, 0x65, 0x76, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12,
	0x1b, 0x0a, 0x09, 0x70, 0x72, 0x65, 0x76, 0x5f, 0x74, 0x65, 0x72, 0x6d, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x08, 0x70, 0x72, 0x65, 0x76, 0x54, 0x65, 0x72, 0x6d, 0x12, 0x26, 0x0a, 0x05,
	0x62, 0x61, 0x74, 0x63, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x73, 0x2e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x52, 0x05, 0x62,
	0x61, 0x74, 0x63, 0x68, 0x12, 0x23, 0x0a, 0x0d, 0x6c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x5f, 0x63,
	0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x6c, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x62, 0x6f,
	0x72, 0x74, 0x65, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x61, 0x62, 0x6f, 0x72,
	0x74, 0x65, 0x64, 0x22, 0x7b, 0x0a, 0x17, 0x52, 0x61, 0x66, 0x74, 0x41, 0x70, 0x70, 0x65, 0x6e,
	0x64, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14,
	0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x69,
	0x6e, 0x64, 0x65, 0x78, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x65, 0x72, 0x6d, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x04, 0x74, 0x65, 0x72, 0x6d, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x6e, 0x65, 0x78, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x6e, 0x65, 0x78, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78,
	0x42, 0x0e, 0x5a, 0x0c, 0x2e, 0x2f, 0x3b, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x73,
	0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_raftorderer_proto_rawDescOnce sync.Once
	file_raftorderer_proto_rawDescData = file_raftorderer_proto_rawDesc
)

func file_raftorderer_proto_rawDescGZIP() []byte {
	file_raftorderer_proto_rawDescOnce.Do(func() {
		file_raftorderer_proto_rawDescData = protoimpl.X.CompressGZIP(file_raftorderer_proto_rawDescData)
	})
	return file_raftorderer_proto_rawDescData
}

var file_raftorderer_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_raftorderer_proto_goTypes = []interface{}{
	(*RaftVoteRequest)(nil),         // 0: protobufs.RaftVoteRequest
	(*RaftVoteResponse)(nil),        // 1: protobufs.RaftVoteResponse
	(*RaftAppendEntryRequest)(nil),  // 2: protobufs.RaftAppendEntryRequest
	(*RaftAppendEntryResponse)(nil), // 3: protobufs.RaftAppendEntryResponse
	(*Batch)(nil),                   // 4: protobufs.Batch
}
var file_raftorderer_proto_depIdxs = []int32{
	4, // 0: protobufs.RaftAppendEntryRequest.batch:type_name -> protobufs.Batch
	1, // [1:1] is the sub-list for method output_type
	1, // [1:1] is the sub-list for method input_type
	1, // [1:1] is the sub-list for extension type_name
	1, // [1:1] is the sub-list for extension extendee
	0, // [0:1] is the sub-list for field type_name
}

func init() { file_raftorderer_proto_init() }
func file_raftorderer_proto_init() {
	if File_raftorderer_proto != nil {
		return
	}
	file_request_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_raftorderer_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RaftVoteRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_raftorderer_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RaftVoteResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_raftorderer_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RaftAppendEntryRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_raftorderer_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RaftAppendEntryResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_raftorderer_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_raftorderer_proto_goTypes,
		DependencyIndexes: file_raftorderer_proto_depIdxs,
		MessageInfos:      file_raftorderer_proto_msgTypes,
	}.Build()
	File_raftorderer_proto = out.File
	file_raftorderer_proto_rawDesc = nil
	file_raftorderer_proto_goTypes = nil
	file_raftorderer_proto_depIdxs = nil
}
