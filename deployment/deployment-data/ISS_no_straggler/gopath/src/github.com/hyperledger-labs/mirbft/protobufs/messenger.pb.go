// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1-devel
// 	protoc        (unknown)
// source: messenger.proto

package protobufs

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ProtocolMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SenderId int32 `protobuf:"varint,1,opt,name=sender_id,json=senderId,proto3" json:"sender_id,omitempty"`
	Sn       int32 `protobuf:"varint,2,opt,name=sn,proto3" json:"sn,omitempty"`
	// Types that are assignable to Msg:
	//	*ProtocolMessage_Preprepare
	//	*ProtocolMessage_Prepare
	//	*ProtocolMessage_Commit
	//	*ProtocolMessage_PbftCheckpoint
	//	*ProtocolMessage_Viewchange
	//	*ProtocolMessage_MissingPreprepareReq
	//	*ProtocolMessage_MissingPreprepare
	//	*ProtocolMessage_Newview
	//	*ProtocolMessage_Proposal
	//	*ProtocolMessage_Vote
	//	*ProtocolMessage_Timeout
	//	*ProtocolMessage_Newseqno
	//	*ProtocolMessage_Checkpoint
	//	*ProtocolMessage_Dummy
	//	*ProtocolMessage_Multi
	//	*ProtocolMessage_BandwidthTest
	//	*ProtocolMessage_Close
	//	*ProtocolMessage_RaftVoteRequest
	//	*ProtocolMessage_RaftVoteResponse
	//	*ProtocolMessage_RaftAppendEntryRequest
	//	*ProtocolMessage_RaftAppendEntryResponse
	//	*ProtocolMessage_RaftNewseqno
	//	*ProtocolMessage_MissingEntryReq
	//	*ProtocolMessage_MissingEntry
	//	*ProtocolMessage_PbftCatchup
	//	*ProtocolMessage_HotstuffNewview
	//	*ProtocolMessage_HotstuffSendtimestamp
	Msg           isProtocolMessage_Msg `protobuf_oneof:"msg"`
	Type          string                `protobuf:"bytes,30,opt,name=type,proto3" json:"type,omitempty"`
	Hightimestamp int32                 `protobuf:"varint,31,opt,name=hightimestamp,proto3" json:"hightimestamp,omitempty"`
	FakeView      int32                 `protobuf:"varint,32,opt,name=fake_view,json=fakeView,proto3" json:"fake_view,omitempty"`
}

func (x *ProtocolMessage) Reset() {
	*x = ProtocolMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messenger_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProtocolMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProtocolMessage) ProtoMessage() {}

func (x *ProtocolMessage) ProtoReflect() protoreflect.Message {
	mi := &file_messenger_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProtocolMessage.ProtoReflect.Descriptor instead.
func (*ProtocolMessage) Descriptor() ([]byte, []int) {
	return file_messenger_proto_rawDescGZIP(), []int{0}
}

func (x *ProtocolMessage) GetSenderId() int32 {
	if x != nil {
		return x.SenderId
	}
	return 0
}

func (x *ProtocolMessage) GetSn() int32 {
	if x != nil {
		return x.Sn
	}
	return 0
}

func (m *ProtocolMessage) GetMsg() isProtocolMessage_Msg {
	if m != nil {
		return m.Msg
	}
	return nil
}

func (x *ProtocolMessage) GetPreprepare() *PbftPreprepare {
	if x, ok := x.GetMsg().(*ProtocolMessage_Preprepare); ok {
		return x.Preprepare
	}
	return nil
}

func (x *ProtocolMessage) GetPrepare() *PbftPrepare {
	if x, ok := x.GetMsg().(*ProtocolMessage_Prepare); ok {
		return x.Prepare
	}
	return nil
}

func (x *ProtocolMessage) GetCommit() *PbftCommit {
	if x, ok := x.GetMsg().(*ProtocolMessage_Commit); ok {
		return x.Commit
	}
	return nil
}

func (x *ProtocolMessage) GetPbftCheckpoint() *PbftCheckpoint {
	if x, ok := x.GetMsg().(*ProtocolMessage_PbftCheckpoint); ok {
		return x.PbftCheckpoint
	}
	return nil
}

func (x *ProtocolMessage) GetViewchange() *SignedMsg {
	if x, ok := x.GetMsg().(*ProtocolMessage_Viewchange); ok {
		return x.Viewchange
	}
	return nil
}

func (x *ProtocolMessage) GetMissingPreprepareReq() *PbftMissingPreprepareRequest {
	if x, ok := x.GetMsg().(*ProtocolMessage_MissingPreprepareReq); ok {
		return x.MissingPreprepareReq
	}
	return nil
}

func (x *ProtocolMessage) GetMissingPreprepare() *PbftMissingPreprepare {
	if x, ok := x.GetMsg().(*ProtocolMessage_MissingPreprepare); ok {
		return x.MissingPreprepare
	}
	return nil
}

func (x *ProtocolMessage) GetNewview() *SignedMsg {
	if x, ok := x.GetMsg().(*ProtocolMessage_Newview); ok {
		return x.Newview
	}
	return nil
}

func (x *ProtocolMessage) GetProposal() *HotStuffProposal {
	if x, ok := x.GetMsg().(*ProtocolMessage_Proposal); ok {
		return x.Proposal
	}
	return nil
}

func (x *ProtocolMessage) GetVote() *HotstuffSignedMsg {
	if x, ok := x.GetMsg().(*ProtocolMessage_Vote); ok {
		return x.Vote
	}
	return nil
}

func (x *ProtocolMessage) GetTimeout() *Timeout {
	if x, ok := x.GetMsg().(*ProtocolMessage_Timeout); ok {
		return x.Timeout
	}
	return nil
}

func (x *ProtocolMessage) GetNewseqno() *PbftPreprepare {
	if x, ok := x.GetMsg().(*ProtocolMessage_Newseqno); ok {
		return x.Newseqno
	}
	return nil
}

func (x *ProtocolMessage) GetCheckpoint() *CheckpointMsg {
	if x, ok := x.GetMsg().(*ProtocolMessage_Checkpoint); ok {
		return x.Checkpoint
	}
	return nil
}

func (x *ProtocolMessage) GetDummy() *DummyOrdererMsg {
	if x, ok := x.GetMsg().(*ProtocolMessage_Dummy); ok {
		return x.Dummy
	}
	return nil
}

func (x *ProtocolMessage) GetMulti() *ProtocolMessageBatch {
	if x, ok := x.GetMsg().(*ProtocolMessage_Multi); ok {
		return x.Multi
	}
	return nil
}

func (x *ProtocolMessage) GetBandwidthTest() *BandwidthTest {
	if x, ok := x.GetMsg().(*ProtocolMessage_BandwidthTest); ok {
		return x.BandwidthTest
	}
	return nil
}

func (x *ProtocolMessage) GetClose() *CloseConnection {
	if x, ok := x.GetMsg().(*ProtocolMessage_Close); ok {
		return x.Close
	}
	return nil
}

func (x *ProtocolMessage) GetRaftVoteRequest() *RaftVoteRequest {
	if x, ok := x.GetMsg().(*ProtocolMessage_RaftVoteRequest); ok {
		return x.RaftVoteRequest
	}
	return nil
}

func (x *ProtocolMessage) GetRaftVoteResponse() *RaftVoteResponse {
	if x, ok := x.GetMsg().(*ProtocolMessage_RaftVoteResponse); ok {
		return x.RaftVoteResponse
	}
	return nil
}

func (x *ProtocolMessage) GetRaftAppendEntryRequest() *RaftAppendEntryRequest {
	if x, ok := x.GetMsg().(*ProtocolMessage_RaftAppendEntryRequest); ok {
		return x.RaftAppendEntryRequest
	}
	return nil
}

func (x *ProtocolMessage) GetRaftAppendEntryResponse() *RaftAppendEntryResponse {
	if x, ok := x.GetMsg().(*ProtocolMessage_RaftAppendEntryResponse); ok {
		return x.RaftAppendEntryResponse
	}
	return nil
}

func (x *ProtocolMessage) GetRaftNewseqno() *RaftAppendEntryRequest {
	if x, ok := x.GetMsg().(*ProtocolMessage_RaftNewseqno); ok {
		return x.RaftNewseqno
	}
	return nil
}

func (x *ProtocolMessage) GetMissingEntryReq() *MissingEntryRequest {
	if x, ok := x.GetMsg().(*ProtocolMessage_MissingEntryReq); ok {
		return x.MissingEntryReq
	}
	return nil
}

func (x *ProtocolMessage) GetMissingEntry() *MissingEntry {
	if x, ok := x.GetMsg().(*ProtocolMessage_MissingEntry); ok {
		return x.MissingEntry
	}
	return nil
}

func (x *ProtocolMessage) GetPbftCatchup() *PbftCatchUp {
	if x, ok := x.GetMsg().(*ProtocolMessage_PbftCatchup); ok {
		return x.PbftCatchup
	}
	return nil
}

func (x *ProtocolMessage) GetHotstuffNewview() *HotStuffNewView {
	if x, ok := x.GetMsg().(*ProtocolMessage_HotstuffNewview); ok {
		return x.HotstuffNewview
	}
	return nil
}

func (x *ProtocolMessage) GetHotstuffSendtimestamp() *HotStuffSendTimestamp {
	if x, ok := x.GetMsg().(*ProtocolMessage_HotstuffSendtimestamp); ok {
		return x.HotstuffSendtimestamp
	}
	return nil
}

func (x *ProtocolMessage) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *ProtocolMessage) GetHightimestamp() int32 {
	if x != nil {
		return x.Hightimestamp
	}
	return 0
}

func (x *ProtocolMessage) GetFakeView() int32 {
	if x != nil {
		return x.FakeView
	}
	return 0
}

type isProtocolMessage_Msg interface {
	isProtocolMessage_Msg()
}

type ProtocolMessage_Preprepare struct {
	Preprepare *PbftPreprepare `protobuf:"bytes,3,opt,name=preprepare,proto3,oneof"`
}

type ProtocolMessage_Prepare struct {
	Prepare *PbftPrepare `protobuf:"bytes,4,opt,name=prepare,proto3,oneof"`
}

type ProtocolMessage_Commit struct {
	Commit *PbftCommit `protobuf:"bytes,5,opt,name=commit,proto3,oneof"`
}

type ProtocolMessage_PbftCheckpoint struct {
	PbftCheckpoint *PbftCheckpoint `protobuf:"bytes,6,opt,name=pbft_checkpoint,json=pbftCheckpoint,proto3,oneof"`
}

type ProtocolMessage_Viewchange struct {
	Viewchange *SignedMsg `protobuf:"bytes,7,opt,name=viewchange,proto3,oneof"`
}

type ProtocolMessage_MissingPreprepareReq struct {
	MissingPreprepareReq *PbftMissingPreprepareRequest `protobuf:"bytes,8,opt,name=missing_preprepare_req,json=missingPreprepareReq,proto3,oneof"`
}

type ProtocolMessage_MissingPreprepare struct {
	MissingPreprepare *PbftMissingPreprepare `protobuf:"bytes,9,opt,name=missing_preprepare,json=missingPreprepare,proto3,oneof"`
}

type ProtocolMessage_Newview struct {
	Newview *SignedMsg `protobuf:"bytes,10,opt,name=newview,proto3,oneof"`
}

type ProtocolMessage_Proposal struct {
	Proposal *HotStuffProposal `protobuf:"bytes,11,opt,name=proposal,proto3,oneof"`
}

type ProtocolMessage_Vote struct {
	Vote *HotstuffSignedMsg `protobuf:"bytes,12,opt,name=vote,proto3,oneof"`
}

type ProtocolMessage_Timeout struct {
	Timeout *Timeout `protobuf:"bytes,13,opt,name=timeout,proto3,oneof"`
}

type ProtocolMessage_Newseqno struct {
	Newseqno *PbftPreprepare `protobuf:"bytes,14,opt,name=newseqno,proto3,oneof"`
}

type ProtocolMessage_Checkpoint struct {
	Checkpoint *CheckpointMsg `protobuf:"bytes,15,opt,name=checkpoint,proto3,oneof"`
}

type ProtocolMessage_Dummy struct {
	Dummy *DummyOrdererMsg `protobuf:"bytes,16,opt,name=dummy,proto3,oneof"`
}

type ProtocolMessage_Multi struct {
	Multi *ProtocolMessageBatch `protobuf:"bytes,17,opt,name=multi,proto3,oneof"`
}

type ProtocolMessage_BandwidthTest struct {
	BandwidthTest *BandwidthTest `protobuf:"bytes,18,opt,name=bandwidth_test,json=bandwidthTest,proto3,oneof"`
}

type ProtocolMessage_Close struct {
	Close *CloseConnection `protobuf:"bytes,19,opt,name=close,proto3,oneof"`
}

type ProtocolMessage_RaftVoteRequest struct {
	RaftVoteRequest *RaftVoteRequest `protobuf:"bytes,20,opt,name=raft_vote_request,json=raftVoteRequest,proto3,oneof"`
}

type ProtocolMessage_RaftVoteResponse struct {
	RaftVoteResponse *RaftVoteResponse `protobuf:"bytes,21,opt,name=raft_vote_response,json=raftVoteResponse,proto3,oneof"`
}

type ProtocolMessage_RaftAppendEntryRequest struct {
	RaftAppendEntryRequest *RaftAppendEntryRequest `protobuf:"bytes,22,opt,name=raft_append_entry_request,json=raftAppendEntryRequest,proto3,oneof"`
}

type ProtocolMessage_RaftAppendEntryResponse struct {
	RaftAppendEntryResponse *RaftAppendEntryResponse `protobuf:"bytes,23,opt,name=raft_append_entry_response,json=raftAppendEntryResponse,proto3,oneof"`
}

type ProtocolMessage_RaftNewseqno struct {
	RaftNewseqno *RaftAppendEntryRequest `protobuf:"bytes,24,opt,name=raft_newseqno,json=raftNewseqno,proto3,oneof"`
}

type ProtocolMessage_MissingEntryReq struct {
	MissingEntryReq *MissingEntryRequest `protobuf:"bytes,25,opt,name=missing_entry_req,json=missingEntryReq,proto3,oneof"`
}

type ProtocolMessage_MissingEntry struct {
	MissingEntry *MissingEntry `protobuf:"bytes,26,opt,name=missing_entry,json=missingEntry,proto3,oneof"`
}

type ProtocolMessage_PbftCatchup struct {
	PbftCatchup *PbftCatchUp `protobuf:"bytes,27,opt,name=pbft_catchup,json=pbftCatchup,proto3,oneof"`
}

type ProtocolMessage_HotstuffNewview struct {
	HotstuffNewview *HotStuffNewView `protobuf:"bytes,28,opt,name=hotstuff_newview,json=hotstuffNewview,proto3,oneof"`
}

type ProtocolMessage_HotstuffSendtimestamp struct {
	HotstuffSendtimestamp *HotStuffSendTimestamp `protobuf:"bytes,29,opt,name=hotstuff_sendtimestamp,json=hotstuffSendtimestamp,proto3,oneof"`
}

func (*ProtocolMessage_Preprepare) isProtocolMessage_Msg() {}

func (*ProtocolMessage_Prepare) isProtocolMessage_Msg() {}

func (*ProtocolMessage_Commit) isProtocolMessage_Msg() {}

func (*ProtocolMessage_PbftCheckpoint) isProtocolMessage_Msg() {}

func (*ProtocolMessage_Viewchange) isProtocolMessage_Msg() {}

func (*ProtocolMessage_MissingPreprepareReq) isProtocolMessage_Msg() {}

func (*ProtocolMessage_MissingPreprepare) isProtocolMessage_Msg() {}

func (*ProtocolMessage_Newview) isProtocolMessage_Msg() {}

func (*ProtocolMessage_Proposal) isProtocolMessage_Msg() {}

func (*ProtocolMessage_Vote) isProtocolMessage_Msg() {}

func (*ProtocolMessage_Timeout) isProtocolMessage_Msg() {}

func (*ProtocolMessage_Newseqno) isProtocolMessage_Msg() {}

func (*ProtocolMessage_Checkpoint) isProtocolMessage_Msg() {}

func (*ProtocolMessage_Dummy) isProtocolMessage_Msg() {}

func (*ProtocolMessage_Multi) isProtocolMessage_Msg() {}

func (*ProtocolMessage_BandwidthTest) isProtocolMessage_Msg() {}

func (*ProtocolMessage_Close) isProtocolMessage_Msg() {}

func (*ProtocolMessage_RaftVoteRequest) isProtocolMessage_Msg() {}

func (*ProtocolMessage_RaftVoteResponse) isProtocolMessage_Msg() {}

func (*ProtocolMessage_RaftAppendEntryRequest) isProtocolMessage_Msg() {}

func (*ProtocolMessage_RaftAppendEntryResponse) isProtocolMessage_Msg() {}

func (*ProtocolMessage_RaftNewseqno) isProtocolMessage_Msg() {}

func (*ProtocolMessage_MissingEntryReq) isProtocolMessage_Msg() {}

func (*ProtocolMessage_MissingEntry) isProtocolMessage_Msg() {}

func (*ProtocolMessage_PbftCatchup) isProtocolMessage_Msg() {}

func (*ProtocolMessage_HotstuffNewview) isProtocolMessage_Msg() {}

func (*ProtocolMessage_HotstuffSendtimestamp) isProtocolMessage_Msg() {}

type ProtocolMessageBatch struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Msgs []*ProtocolMessage `protobuf:"bytes,1,rep,name=msgs,proto3" json:"msgs,omitempty"`
}

func (x *ProtocolMessageBatch) Reset() {
	*x = ProtocolMessageBatch{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messenger_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProtocolMessageBatch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProtocolMessageBatch) ProtoMessage() {}

func (x *ProtocolMessageBatch) ProtoReflect() protoreflect.Message {
	mi := &file_messenger_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProtocolMessageBatch.ProtoReflect.Descriptor instead.
func (*ProtocolMessageBatch) Descriptor() ([]byte, []int) {
	return file_messenger_proto_rawDescGZIP(), []int{1}
}

func (x *ProtocolMessageBatch) GetMsgs() []*ProtocolMessage {
	if x != nil {
		return x.Msgs
	}
	return nil
}

type BandwidthTest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Payload []byte `protobuf:"bytes,1,opt,name=payload,proto3" json:"payload,omitempty"`
}

func (x *BandwidthTest) Reset() {
	*x = BandwidthTest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messenger_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BandwidthTest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BandwidthTest) ProtoMessage() {}

func (x *BandwidthTest) ProtoReflect() protoreflect.Message {
	mi := &file_messenger_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BandwidthTest.ProtoReflect.Descriptor instead.
func (*BandwidthTest) Descriptor() ([]byte, []int) {
	return file_messenger_proto_rawDescGZIP(), []int{2}
}

func (x *BandwidthTest) GetPayload() []byte {
	if x != nil {
		return x.Payload
	}
	return nil
}

type BandwidthTestAck struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *BandwidthTestAck) Reset() {
	*x = BandwidthTestAck{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messenger_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BandwidthTestAck) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BandwidthTestAck) ProtoMessage() {}

func (x *BandwidthTestAck) ProtoReflect() protoreflect.Message {
	mi := &file_messenger_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BandwidthTestAck.ProtoReflect.Descriptor instead.
func (*BandwidthTestAck) Descriptor() ([]byte, []int) {
	return file_messenger_proto_rawDescGZIP(), []int{3}
}

type CloseConnection struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CloseConnection) Reset() {
	*x = CloseConnection{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messenger_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CloseConnection) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CloseConnection) ProtoMessage() {}

func (x *CloseConnection) ProtoReflect() protoreflect.Message {
	mi := &file_messenger_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CloseConnection.ProtoReflect.Descriptor instead.
func (*CloseConnection) Descriptor() ([]byte, []int) {
	return file_messenger_proto_rawDescGZIP(), []int{4}
}

var File_messenger_proto protoreflect.FileDescriptor

var file_messenger_proto_rawDesc = []byte{
	0x0a, 0x0f, 0x6d, 0x65, 0x73, 0x73, 0x65, 0x6e, 0x67, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x09, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x73, 0x1a, 0x10, 0x63, 0x68,
	0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x12,
	0x64, 0x75, 0x6d, 0x6d, 0x79, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x11, 0x70, 0x62, 0x66, 0x74, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x65, 0x72, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x15, 0x68, 0x6f, 0x74, 0x73, 0x74, 0x75, 0x66, 0x66, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x11, 0x72, 0x61,
	0x66, 0x74, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x0d, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0c,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xad, 0x0f, 0x0a,
	0x0f, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x12, 0x1b, 0x0a, 0x09, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x08, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12, 0x0e, 0x0a,
	0x02, 0x73, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x73, 0x6e, 0x12, 0x3b, 0x0a,
	0x0a, 0x70, 0x72, 0x65, 0x70, 0x72, 0x65, 0x70, 0x61, 0x72, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x19, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x73, 0x2e, 0x50, 0x62,
	0x66, 0x74, 0x50, 0x72, 0x65, 0x70, 0x72, 0x65, 0x70, 0x61, 0x72, 0x65, 0x48, 0x00, 0x52, 0x0a,
	0x70, 0x72, 0x65, 0x70, 0x72, 0x65, 0x70, 0x61, 0x72, 0x65, 0x12, 0x32, 0x0a, 0x07, 0x70, 0x72,
	0x65, 0x70, 0x61, 0x72, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x73, 0x2e, 0x50, 0x62, 0x66, 0x74, 0x50, 0x72, 0x65, 0x70,
	0x61, 0x72, 0x65, 0x48, 0x00, 0x52, 0x07, 0x70, 0x72, 0x65, 0x70, 0x61, 0x72, 0x65, 0x12, 0x2f,
	0x0a, 0x06, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x73, 0x2e, 0x50, 0x62, 0x66, 0x74, 0x43,
	0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x48, 0x00, 0x52, 0x06, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x12,
	0x44, 0x0a, 0x0f, 0x70, 0x62, 0x66, 0x74, 0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x73, 0x2e, 0x50, 0x62, 0x66, 0x74, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x0e, 0x70, 0x62, 0x66, 0x74, 0x43, 0x68, 0x65, 0x63, 0x6b,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x36, 0x0a, 0x0a, 0x76, 0x69, 0x65, 0x77, 0x63, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x73, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x4d, 0x73, 0x67, 0x48,
	0x00, 0x52, 0x0a, 0x76, 0x69, 0x65, 0x77, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x5f, 0x0a,
	0x16, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x5f, 0x70, 0x72, 0x65, 0x70, 0x72, 0x65, 0x70,
	0x61, 0x72, 0x65, 0x5f, 0x72, 0x65, 0x71, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x73, 0x2e, 0x50, 0x62, 0x66, 0x74, 0x4d, 0x69,
	0x73, 0x73, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x65, 0x70, 0x72, 0x65, 0x70, 0x61, 0x72, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x14, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6e,
	0x67, 0x50, 0x72, 0x65, 0x70, 0x72, 0x65, 0x70, 0x61, 0x72, 0x65, 0x52, 0x65, 0x71, 0x12, 0x51,
	0x0a, 0x12, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x5f, 0x70, 0x72, 0x65, 0x70, 0x72, 0x65,
	0x70, 0x61, 0x72, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x73, 0x2e, 0x50, 0x62, 0x66, 0x74, 0x4d, 0x69, 0x73, 0x73, 0x69,
	0x6e, 0x67, 0x50, 0x72, 0x65, 0x70, 0x72, 0x65, 0x70, 0x61, 0x72, 0x65, 0x48, 0x00, 0x52, 0x11,
	0x6d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x65, 0x70, 0x72, 0x65, 0x70, 0x61, 0x72,
	0x65, 0x12, 0x30, 0x0a, 0x07, 0x6e, 0x65, 0x77, 0x76, 0x69, 0x65, 0x77, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x14, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x73, 0x2e, 0x53,
	0x69, 0x67, 0x6e, 0x65, 0x64, 0x4d, 0x73, 0x67, 0x48, 0x00, 0x52, 0x07, 0x6e, 0x65, 0x77, 0x76,
	0x69, 0x65, 0x77, 0x12, 0x39, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x73, 0x2e, 0x48, 0x6f, 0x74, 0x53, 0x74, 0x75, 0x66, 0x66, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73,
	0x61, 0x6c, 0x48, 0x00, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x12, 0x32,
	0x0a, 0x04, 0x76, 0x6f, 0x74, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x73, 0x2e, 0x48, 0x6f, 0x74, 0x73, 0x74, 0x75, 0x66,
	0x66, 0x53, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x4d, 0x73, 0x67, 0x48, 0x00, 0x52, 0x04, 0x76, 0x6f,
	0x74, 0x65, 0x12, 0x2e, 0x0a, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x73, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x48, 0x00, 0x52, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x6f,
	0x75, 0x74, 0x12, 0x37, 0x0a, 0x08, 0x6e, 0x65, 0x77, 0x73, 0x65, 0x71, 0x6e, 0x6f, 0x18, 0x0e,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x73,
	0x2e, 0x50, 0x62, 0x66, 0x74, 0x50, 0x72, 0x65, 0x70, 0x72, 0x65, 0x70, 0x61, 0x72, 0x65, 0x48,
	0x00, 0x52, 0x08, 0x6e, 0x65, 0x77, 0x73, 0x65, 0x71, 0x6e, 0x6f, 0x12, 0x3a, 0x0a, 0x0a, 0x63,
	0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x18, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x73, 0x2e, 0x43, 0x68, 0x65, 0x63,
	0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x4d, 0x73, 0x67, 0x48, 0x00, 0x52, 0x0a, 0x63, 0x68, 0x65,
	0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x32, 0x0a, 0x05, 0x64, 0x75, 0x6d, 0x6d, 0x79,
	0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x73, 0x2e, 0x44, 0x75, 0x6d, 0x6d, 0x79, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x65, 0x72, 0x4d,
	0x73, 0x67, 0x48, 0x00, 0x52, 0x05, 0x64, 0x75, 0x6d, 0x6d, 0x79, 0x12, 0x37, 0x0a, 0x05, 0x6d,
	0x75, 0x6c, 0x74, 0x69, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x73, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x42, 0x61, 0x74, 0x63, 0x68, 0x48, 0x00, 0x52, 0x05, 0x6d,
	0x75, 0x6c, 0x74, 0x69, 0x12, 0x41, 0x0a, 0x0e, 0x62, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x64, 0x74,
	0x68, 0x5f, 0x74, 0x65, 0x73, 0x74, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x73, 0x2e, 0x42, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x64,
	0x74, 0x68, 0x54, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x0d, 0x62, 0x61, 0x6e, 0x64, 0x77, 0x69,
	0x64, 0x74, 0x68, 0x54, 0x65, 0x73, 0x74, 0x12, 0x32, 0x0a, 0x05, 0x63, 0x6c, 0x6f, 0x73, 0x65,
	0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x73, 0x2e, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x48, 0x00, 0x52, 0x05, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x12, 0x48, 0x0a, 0x11, 0x72,
	0x61, 0x66, 0x74, 0x5f, 0x76, 0x6f, 0x74, 0x65, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x73, 0x2e, 0x52, 0x61, 0x66, 0x74, 0x56, 0x6f, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x48, 0x00, 0x52, 0x0f, 0x72, 0x61, 0x66, 0x74, 0x56, 0x6f, 0x74, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x4b, 0x0a, 0x12, 0x72, 0x61, 0x66, 0x74, 0x5f, 0x76, 0x6f,
	0x74, 0x65, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x73, 0x2e, 0x52, 0x61,
	0x66, 0x74, 0x56, 0x6f, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00,
	0x52, 0x10, 0x72, 0x61, 0x66, 0x74, 0x56, 0x6f, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x5e, 0x0a, 0x19, 0x72, 0x61, 0x66, 0x74, 0x5f, 0x61, 0x70, 0x70, 0x65, 0x6e,
	0x64, 0x5f, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18,
	0x16, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x73, 0x2e, 0x52, 0x61, 0x66, 0x74, 0x41, 0x70, 0x70, 0x65, 0x6e, 0x64, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x16, 0x72, 0x61, 0x66, 0x74,
	0x41, 0x70, 0x70, 0x65, 0x6e, 0x64, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x61, 0x0a, 0x1a, 0x72, 0x61, 0x66, 0x74, 0x5f, 0x61, 0x70, 0x70, 0x65, 0x6e,
	0x64, 0x5f, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x18, 0x17, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x73, 0x2e, 0x52, 0x61, 0x66, 0x74, 0x41, 0x70, 0x70, 0x65, 0x6e, 0x64, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x17, 0x72, 0x61,
	0x66, 0x74, 0x41, 0x70, 0x70, 0x65, 0x6e, 0x64, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x48, 0x0a, 0x0d, 0x72, 0x61, 0x66, 0x74, 0x5f, 0x6e, 0x65,
	0x77, 0x73, 0x65, 0x71, 0x6e, 0x6f, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x73, 0x2e, 0x52, 0x61, 0x66, 0x74, 0x41, 0x70, 0x70,
	0x65, 0x6e, 0x64, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48,
	0x00, 0x52, 0x0c, 0x72, 0x61, 0x66, 0x74, 0x4e, 0x65, 0x77, 0x73, 0x65, 0x71, 0x6e, 0x6f, 0x12,
	0x4c, 0x0a, 0x11, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x5f, 0x65, 0x6e, 0x74, 0x72, 0x79,
	0x5f, 0x72, 0x65, 0x71, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x73, 0x2e, 0x4d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x0f, 0x6d, 0x69,
	0x73, 0x73, 0x69, 0x6e, 0x67, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x65, 0x71, 0x12, 0x3e, 0x0a,
	0x0d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x5f, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x18, 0x1a,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x73,
	0x2e, 0x4d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x48, 0x00, 0x52,
	0x0c, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x3b, 0x0a,
	0x0c, 0x70, 0x62, 0x66, 0x74, 0x5f, 0x63, 0x61, 0x74, 0x63, 0x68, 0x75, 0x70, 0x18, 0x1b, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x73, 0x2e,
	0x50, 0x62, 0x66, 0x74, 0x43, 0x61, 0x74, 0x63, 0x68, 0x55, 0x70, 0x48, 0x00, 0x52, 0x0b, 0x70,
	0x62, 0x66, 0x74, 0x43, 0x61, 0x74, 0x63, 0x68, 0x75, 0x70, 0x12, 0x47, 0x0a, 0x10, 0x68, 0x6f,
	0x74, 0x73, 0x74, 0x75, 0x66, 0x66, 0x5f, 0x6e, 0x65, 0x77, 0x76, 0x69, 0x65, 0x77, 0x18, 0x1c,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x73,
	0x2e, 0x48, 0x6f, 0x74, 0x53, 0x74, 0x75, 0x66, 0x66, 0x4e, 0x65, 0x77, 0x56, 0x69, 0x65, 0x77,
	0x48, 0x00, 0x52, 0x0f, 0x68, 0x6f, 0x74, 0x73, 0x74, 0x75, 0x66, 0x66, 0x4e, 0x65, 0x77, 0x76,
	0x69, 0x65, 0x77, 0x12, 0x59, 0x0a, 0x16, 0x68, 0x6f, 0x74, 0x73, 0x74, 0x75, 0x66, 0x66, 0x5f,
	0x73, 0x65, 0x6e, 0x64, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x1d, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x73, 0x2e,
	0x48, 0x6f, 0x74, 0x53, 0x74, 0x75, 0x66, 0x66, 0x53, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x48, 0x00, 0x52, 0x15, 0x68, 0x6f, 0x74, 0x73, 0x74, 0x75, 0x66,
	0x66, 0x53, 0x65, 0x6e, 0x64, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x12,
	0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x68, 0x69, 0x67, 0x68, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x68, 0x69, 0x67, 0x68, 0x74,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x61, 0x6b, 0x65,
	0x5f, 0x76, 0x69, 0x65, 0x77, 0x18, 0x20, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x66, 0x61, 0x6b,
	0x65, 0x56, 0x69, 0x65, 0x77, 0x42, 0x05, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x22, 0x46, 0x0a, 0x14,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x42,
	0x61, 0x74, 0x63, 0x68, 0x12, 0x2e, 0x0a, 0x04, 0x6d, 0x73, 0x67, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x73, 0x2e, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x04,
	0x6d, 0x73, 0x67, 0x73, 0x22, 0x29, 0x0a, 0x0d, 0x42, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x64, 0x74,
	0x68, 0x54, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x22,
	0x12, 0x0a, 0x10, 0x42, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x64, 0x74, 0x68, 0x54, 0x65, 0x73, 0x74,
	0x41, 0x63, 0x6b, 0x22, 0x11, 0x0a, 0x0f, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x43, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x32, 0xe1, 0x01, 0x0a, 0x09, 0x4d, 0x65, 0x73, 0x73, 0x65,
	0x6e, 0x67, 0x65, 0x72, 0x12, 0x45, 0x0a, 0x06, 0x4c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x12, 0x1a,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x73, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x1a, 0x1b, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x73, 0x2e, 0x42, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x64, 0x74, 0x68,
	0x54, 0x65, 0x73, 0x74, 0x41, 0x63, 0x6b, 0x28, 0x01, 0x30, 0x01, 0x12, 0x42, 0x0a, 0x07, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x73, 0x2e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x19, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x73, 0x2e, 0x43, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x28, 0x01, 0x30, 0x01, 0x12,
	0x49, 0x0a, 0x07, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x12, 0x1d, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x73, 0x2e, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x53, 0x75, 0x62,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x1b, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x73, 0x2e, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x41, 0x73, 0x73, 0x69,
	0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x28, 0x01, 0x30, 0x01, 0x42, 0x0e, 0x5a, 0x0c, 0x2e, 0x2f,
	0x3b, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x73, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
}

var (
	file_messenger_proto_rawDescOnce sync.Once
	file_messenger_proto_rawDescData = file_messenger_proto_rawDesc
)

func file_messenger_proto_rawDescGZIP() []byte {
	file_messenger_proto_rawDescOnce.Do(func() {
		file_messenger_proto_rawDescData = protoimpl.X.CompressGZIP(file_messenger_proto_rawDescData)
	})
	return file_messenger_proto_rawDescData
}

var file_messenger_proto_msgTypes = make([]protoimpl.MessageInfo, 5)
var file_messenger_proto_goTypes = []interface{}{
	(*ProtocolMessage)(nil),              // 0: protobufs.ProtocolMessage
	(*ProtocolMessageBatch)(nil),         // 1: protobufs.ProtocolMessageBatch
	(*BandwidthTest)(nil),                // 2: protobufs.BandwidthTest
	(*BandwidthTestAck)(nil),             // 3: protobufs.BandwidthTestAck
	(*CloseConnection)(nil),              // 4: protobufs.CloseConnection
	(*PbftPreprepare)(nil),               // 5: protobufs.PbftPreprepare
	(*PbftPrepare)(nil),                  // 6: protobufs.PbftPrepare
	(*PbftCommit)(nil),                   // 7: protobufs.PbftCommit
	(*PbftCheckpoint)(nil),               // 8: protobufs.PbftCheckpoint
	(*SignedMsg)(nil),                    // 9: protobufs.SignedMsg
	(*PbftMissingPreprepareRequest)(nil), // 10: protobufs.PbftMissingPreprepareRequest
	(*PbftMissingPreprepare)(nil),        // 11: protobufs.PbftMissingPreprepare
	(*HotStuffProposal)(nil),             // 12: protobufs.HotStuffProposal
	(*HotstuffSignedMsg)(nil),            // 13: protobufs.HotstuffSignedMsg
	(*Timeout)(nil),                      // 14: protobufs.Timeout
	(*CheckpointMsg)(nil),                // 15: protobufs.CheckpointMsg
	(*DummyOrdererMsg)(nil),              // 16: protobufs.DummyOrdererMsg
	(*RaftVoteRequest)(nil),              // 17: protobufs.RaftVoteRequest
	(*RaftVoteResponse)(nil),             // 18: protobufs.RaftVoteResponse
	(*RaftAppendEntryRequest)(nil),       // 19: protobufs.RaftAppendEntryRequest
	(*RaftAppendEntryResponse)(nil),      // 20: protobufs.RaftAppendEntryResponse
	(*MissingEntryRequest)(nil),          // 21: protobufs.MissingEntryRequest
	(*MissingEntry)(nil),                 // 22: protobufs.MissingEntry
	(*PbftCatchUp)(nil),                  // 23: protobufs.PbftCatchUp
	(*HotStuffNewView)(nil),              // 24: protobufs.HotStuffNewView
	(*HotStuffSendTimestamp)(nil),        // 25: protobufs.HotStuffSendTimestamp
	(*ClientRequest)(nil),                // 26: protobufs.ClientRequest
	(*BucketSubscription)(nil),           // 27: protobufs.BucketSubscription
	(*ClientResponse)(nil),               // 28: protobufs.ClientResponse
	(*BucketAssignment)(nil),             // 29: protobufs.BucketAssignment
}
var file_messenger_proto_depIdxs = []int32{
	5,  // 0: protobufs.ProtocolMessage.preprepare:type_name -> protobufs.PbftPreprepare
	6,  // 1: protobufs.ProtocolMessage.prepare:type_name -> protobufs.PbftPrepare
	7,  // 2: protobufs.ProtocolMessage.commit:type_name -> protobufs.PbftCommit
	8,  // 3: protobufs.ProtocolMessage.pbft_checkpoint:type_name -> protobufs.PbftCheckpoint
	9,  // 4: protobufs.ProtocolMessage.viewchange:type_name -> protobufs.SignedMsg
	10, // 5: protobufs.ProtocolMessage.missing_preprepare_req:type_name -> protobufs.PbftMissingPreprepareRequest
	11, // 6: protobufs.ProtocolMessage.missing_preprepare:type_name -> protobufs.PbftMissingPreprepare
	9,  // 7: protobufs.ProtocolMessage.newview:type_name -> protobufs.SignedMsg
	12, // 8: protobufs.ProtocolMessage.proposal:type_name -> protobufs.HotStuffProposal
	13, // 9: protobufs.ProtocolMessage.vote:type_name -> protobufs.HotstuffSignedMsg
	14, // 10: protobufs.ProtocolMessage.timeout:type_name -> protobufs.Timeout
	5,  // 11: protobufs.ProtocolMessage.newseqno:type_name -> protobufs.PbftPreprepare
	15, // 12: protobufs.ProtocolMessage.checkpoint:type_name -> protobufs.CheckpointMsg
	16, // 13: protobufs.ProtocolMessage.dummy:type_name -> protobufs.DummyOrdererMsg
	1,  // 14: protobufs.ProtocolMessage.multi:type_name -> protobufs.ProtocolMessageBatch
	2,  // 15: protobufs.ProtocolMessage.bandwidth_test:type_name -> protobufs.BandwidthTest
	4,  // 16: protobufs.ProtocolMessage.close:type_name -> protobufs.CloseConnection
	17, // 17: protobufs.ProtocolMessage.raft_vote_request:type_name -> protobufs.RaftVoteRequest
	18, // 18: protobufs.ProtocolMessage.raft_vote_response:type_name -> protobufs.RaftVoteResponse
	19, // 19: protobufs.ProtocolMessage.raft_append_entry_request:type_name -> protobufs.RaftAppendEntryRequest
	20, // 20: protobufs.ProtocolMessage.raft_append_entry_response:type_name -> protobufs.RaftAppendEntryResponse
	19, // 21: protobufs.ProtocolMessage.raft_newseqno:type_name -> protobufs.RaftAppendEntryRequest
	21, // 22: protobufs.ProtocolMessage.missing_entry_req:type_name -> protobufs.MissingEntryRequest
	22, // 23: protobufs.ProtocolMessage.missing_entry:type_name -> protobufs.MissingEntry
	23, // 24: protobufs.ProtocolMessage.pbft_catchup:type_name -> protobufs.PbftCatchUp
	24, // 25: protobufs.ProtocolMessage.hotstuff_newview:type_name -> protobufs.HotStuffNewView
	25, // 26: protobufs.ProtocolMessage.hotstuff_sendtimestamp:type_name -> protobufs.HotStuffSendTimestamp
	0,  // 27: protobufs.ProtocolMessageBatch.msgs:type_name -> protobufs.ProtocolMessage
	0,  // 28: protobufs.Messenger.Listen:input_type -> protobufs.ProtocolMessage
	26, // 29: protobufs.Messenger.Request:input_type -> protobufs.ClientRequest
	27, // 30: protobufs.Messenger.Buckets:input_type -> protobufs.BucketSubscription
	3,  // 31: protobufs.Messenger.Listen:output_type -> protobufs.BandwidthTestAck
	28, // 32: protobufs.Messenger.Request:output_type -> protobufs.ClientResponse
	29, // 33: protobufs.Messenger.Buckets:output_type -> protobufs.BucketAssignment
	31, // [31:34] is the sub-list for method output_type
	28, // [28:31] is the sub-list for method input_type
	28, // [28:28] is the sub-list for extension type_name
	28, // [28:28] is the sub-list for extension extendee
	0,  // [0:28] is the sub-list for field type_name
}

func init() { file_messenger_proto_init() }
func file_messenger_proto_init() {
	if File_messenger_proto != nil {
		return
	}
	file_checkpoint_proto_init()
	file_dummyorderer_proto_init()
	file_pbftorderer_proto_init()
	file_hotstufforderer_proto_init()
	file_raftorderer_proto_init()
	file_request_proto_init()
	file_common_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_messenger_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProtocolMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messenger_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProtocolMessageBatch); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messenger_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BandwidthTest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messenger_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BandwidthTestAck); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messenger_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CloseConnection); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_messenger_proto_msgTypes[0].OneofWrappers = []interface{}{
		(*ProtocolMessage_Preprepare)(nil),
		(*ProtocolMessage_Prepare)(nil),
		(*ProtocolMessage_Commit)(nil),
		(*ProtocolMessage_PbftCheckpoint)(nil),
		(*ProtocolMessage_Viewchange)(nil),
		(*ProtocolMessage_MissingPreprepareReq)(nil),
		(*ProtocolMessage_MissingPreprepare)(nil),
		(*ProtocolMessage_Newview)(nil),
		(*ProtocolMessage_Proposal)(nil),
		(*ProtocolMessage_Vote)(nil),
		(*ProtocolMessage_Timeout)(nil),
		(*ProtocolMessage_Newseqno)(nil),
		(*ProtocolMessage_Checkpoint)(nil),
		(*ProtocolMessage_Dummy)(nil),
		(*ProtocolMessage_Multi)(nil),
		(*ProtocolMessage_BandwidthTest)(nil),
		(*ProtocolMessage_Close)(nil),
		(*ProtocolMessage_RaftVoteRequest)(nil),
		(*ProtocolMessage_RaftVoteResponse)(nil),
		(*ProtocolMessage_RaftAppendEntryRequest)(nil),
		(*ProtocolMessage_RaftAppendEntryResponse)(nil),
		(*ProtocolMessage_RaftNewseqno)(nil),
		(*ProtocolMessage_MissingEntryReq)(nil),
		(*ProtocolMessage_MissingEntry)(nil),
		(*ProtocolMessage_PbftCatchup)(nil),
		(*ProtocolMessage_HotstuffNewview)(nil),
		(*ProtocolMessage_HotstuffSendtimestamp)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_messenger_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   5,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_messenger_proto_goTypes,
		DependencyIndexes: file_messenger_proto_depIdxs,
		MessageInfos:      file_messenger_proto_msgTypes,
	}.Build()
	File_messenger_proto = out.File
	file_messenger_proto_rawDesc = nil
	file_messenger_proto_goTypes = nil
	file_messenger_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// MessengerClient is the client API for Messenger service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MessengerClient interface {
	Listen(ctx context.Context, opts ...grpc.CallOption) (Messenger_ListenClient, error)
	Request(ctx context.Context, opts ...grpc.CallOption) (Messenger_RequestClient, error)
	Buckets(ctx context.Context, opts ...grpc.CallOption) (Messenger_BucketsClient, error)
}

type messengerClient struct {
	cc grpc.ClientConnInterface
}

func NewMessengerClient(cc grpc.ClientConnInterface) MessengerClient {
	return &messengerClient{cc}
}

func (c *messengerClient) Listen(ctx context.Context, opts ...grpc.CallOption) (Messenger_ListenClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Messenger_serviceDesc.Streams[0], "/protobufs.Messenger/Listen", opts...)
	if err != nil {
		return nil, err
	}
	x := &messengerListenClient{stream}
	return x, nil
}

type Messenger_ListenClient interface {
	Send(*ProtocolMessage) error
	Recv() (*BandwidthTestAck, error)
	grpc.ClientStream
}

type messengerListenClient struct {
	grpc.ClientStream
}

func (x *messengerListenClient) Send(m *ProtocolMessage) error {
	return x.ClientStream.SendMsg(m)
}

func (x *messengerListenClient) Recv() (*BandwidthTestAck, error) {
	m := new(BandwidthTestAck)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *messengerClient) Request(ctx context.Context, opts ...grpc.CallOption) (Messenger_RequestClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Messenger_serviceDesc.Streams[1], "/protobufs.Messenger/Request", opts...)
	if err != nil {
		return nil, err
	}
	x := &messengerRequestClient{stream}
	return x, nil
}

type Messenger_RequestClient interface {
	Send(*ClientRequest) error
	Recv() (*ClientResponse, error)
	grpc.ClientStream
}

type messengerRequestClient struct {
	grpc.ClientStream
}

func (x *messengerRequestClient) Send(m *ClientRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *messengerRequestClient) Recv() (*ClientResponse, error) {
	m := new(ClientResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *messengerClient) Buckets(ctx context.Context, opts ...grpc.CallOption) (Messenger_BucketsClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Messenger_serviceDesc.Streams[2], "/protobufs.Messenger/Buckets", opts...)
	if err != nil {
		return nil, err
	}
	x := &messengerBucketsClient{stream}
	return x, nil
}

type Messenger_BucketsClient interface {
	Send(*BucketSubscription) error
	Recv() (*BucketAssignment, error)
	grpc.ClientStream
}

type messengerBucketsClient struct {
	grpc.ClientStream
}

func (x *messengerBucketsClient) Send(m *BucketSubscription) error {
	return x.ClientStream.SendMsg(m)
}

func (x *messengerBucketsClient) Recv() (*BucketAssignment, error) {
	m := new(BucketAssignment)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// MessengerServer is the server API for Messenger service.
type MessengerServer interface {
	Listen(Messenger_ListenServer) error
	Request(Messenger_RequestServer) error
	Buckets(Messenger_BucketsServer) error
}

// UnimplementedMessengerServer can be embedded to have forward compatible implementations.
type UnimplementedMessengerServer struct {
}

func (*UnimplementedMessengerServer) Listen(Messenger_ListenServer) error {
	return status.Errorf(codes.Unimplemented, "method Listen not implemented")
}
func (*UnimplementedMessengerServer) Request(Messenger_RequestServer) error {
	return status.Errorf(codes.Unimplemented, "method Request not implemented")
}
func (*UnimplementedMessengerServer) Buckets(Messenger_BucketsServer) error {
	return status.Errorf(codes.Unimplemented, "method Buckets not implemented")
}

func RegisterMessengerServer(s *grpc.Server, srv MessengerServer) {
	s.RegisterService(&_Messenger_serviceDesc, srv)
}

func _Messenger_Listen_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(MessengerServer).Listen(&messengerListenServer{stream})
}

type Messenger_ListenServer interface {
	Send(*BandwidthTestAck) error
	Recv() (*ProtocolMessage, error)
	grpc.ServerStream
}

type messengerListenServer struct {
	grpc.ServerStream
}

func (x *messengerListenServer) Send(m *BandwidthTestAck) error {
	return x.ServerStream.SendMsg(m)
}

func (x *messengerListenServer) Recv() (*ProtocolMessage, error) {
	m := new(ProtocolMessage)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Messenger_Request_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(MessengerServer).Request(&messengerRequestServer{stream})
}

type Messenger_RequestServer interface {
	Send(*ClientResponse) error
	Recv() (*ClientRequest, error)
	grpc.ServerStream
}

type messengerRequestServer struct {
	grpc.ServerStream
}

func (x *messengerRequestServer) Send(m *ClientResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *messengerRequestServer) Recv() (*ClientRequest, error) {
	m := new(ClientRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Messenger_Buckets_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(MessengerServer).Buckets(&messengerBucketsServer{stream})
}

type Messenger_BucketsServer interface {
	Send(*BucketAssignment) error
	Recv() (*BucketSubscription, error)
	grpc.ServerStream
}

type messengerBucketsServer struct {
	grpc.ServerStream
}

func (x *messengerBucketsServer) Send(m *BucketAssignment) error {
	return x.ServerStream.SendMsg(m)
}

func (x *messengerBucketsServer) Recv() (*BucketSubscription, error) {
	m := new(BucketSubscription)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _Messenger_serviceDesc = grpc.ServiceDesc{
	ServiceName: "protobufs.Messenger",
	HandlerType: (*MessengerServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Listen",
			Handler:       _Messenger_Listen_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "Request",
			Handler:       _Messenger_Request_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "Buckets",
			Handler:       _Messenger_Buckets_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "messenger.proto",
}
